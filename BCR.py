# -*- generated by 1.0.10 -*-
import da
_config_object = {'channel': {'fifo', 'reliable'}, 'clock': 'lamport'}
import sys
import os
import time
import random
import datetime
import string
CLIENT = da.import_da('client')
OLYMPUS = da.import_da('olympus')
from utils import Utils, State

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def run(self):
        config = {}
        if (len(sys.argv) > 1):
            with open(sys.argv[1], 'r') as f:
                for line in f:
                    if (not (line[0] == '#')):
                        (key, sep, val) = line.partition('=')
                        if (not (len(sep) == 0)):
                            val = val.strip()
                            config[key.strip()] = (int(val) if str.isdecimal(val) else val)
            self.output(('Current Settings : ' + str(config)))
            clientPrivateKeys = []
            clientPublicKeys = []
            clientIds = []
            failures = {}
            num_clients = config['num_client']
            num_replicas = ((2 * config['t']) + 1)
            client_timeout = int(config['client_timeout'])
            head_timeout = int(config['head_timeout'])
            nonhead_timeout = int(config['nonhead_timeout'])
            if ('checkpt_interval' in config):
                checkpt_interval = int(config['checkpt_interval'])
            else:
                checkpt_interval = 10
            workload_for_clients = {}
            for key in config.keys():
                if ('failures' in key):
                    keyf = key[(key.find('[') + 1):key.find(']')]
                    failures[keyf] = config[key]
            for i in range(num_clients):
                workload_for_clients[i] = config[(('workload[' + str(i)) + ']')]
            (olympusPrivateKey, olympusPublicKey) = Utils.getSignedKey(self._id)
            for i in range(num_clients):
                (clientPrivateKey, clientPublicKey) = Utils.getSignedKey(self._id)
                clientPrivateKeys.append(clientPrivateKey)
                clientPublicKeys.append(clientPublicKey)
                clientIds.append(('c' + str(i)))
            olympus = self.new(OLYMPUS.Olympus)
            clients = list(self.new(CLIENT.Client, num=num_clients))
            for i in range(num_clients):
                self._setup(clients[i], (olympus, clientIds[i], olympusPublicKey, workload_for_clients[i], clientPrivateKeys[i], client_timeout))
            self._setup(olympus, (olympusPrivateKey, olympusPublicKey, clientPublicKeys, num_replicas, clients, head_timeout, nonhead_timeout, failures, checkpt_interval))
            self._start(olympus)
            self._start(clients)
